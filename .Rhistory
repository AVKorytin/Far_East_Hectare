coords1$y <- as.numeric(coords1$y)
sum(is.na(coords1$x))
coords1[is.na(coords1$x),]
which(is.na(coords1$x))
coords1$x[856] <- 16802869.5431
coords1$y[856] <- 8423466.9713
coords1$y[860] <- 8300878
coords1$x[860] <- 16789970
coords1$x[864] <- 16790162.93325
coords1$y[864] <- 8306655.8884
coords1$x[874] <- 16784957.1202
coords1$y[874] <- 8303002.49355
coords1$x[855]
str(coords)
str(coords2)
coords2$x <- as.numeric(coords2$x)
coords2$y <- as.numeric(coords2$y)
coords$y <- as.numeric(coords$y)
coords$x <- as.numeric(coords$x)
coords0 <- rbind(coords[,1:3], coords2[,1:3], coords1)
saveRDS(coords0, "coords0.Rds")
coords0 <- cbind(coords0, mercator(coords0[,2:3], inverse = T))
require(geosphere)
coords0 <- cbind(coords0, mercator(coords0[,2:3], inverse = T))
str(coords0)
saveRDS(coords0, "coords0.Rds")
str(h11)
p <- aggregate(p ~ kk, subset(h11, kk %in% coords0$k), median)
head(p)
dim(p)
dim(coords0)
str(h)
p <- aggregate(p ~ k_, subset(h, k_ %in% coords0$k), median)
dim(p)
n <- aggregate(p ~ k_, subset(h, k_ %in% coords0$k), length)
f <- merge(coords0, p, n)
h <- h[,-ncol(h)]
names(h)
h$k <- with(h, paste(k0, k1, k2, sep = ":"))
p <- aggregate(p ~ k, subset(h, k %in% coords0$k), median)
n <- aggregate(p ~ k, subset(h, k %in% coords0$k), length)
f <- merge(coords0, p, n, by = "k")
f <- merge(coords0, p, n)
f <- merge(merge(coords0, p), n))
f <- merge(merge(coords0, p), n)
str(f)
f <- merge(merge(coords0, p, by = "k"), n, by = "k")
str(f)
p <- aggregate(p ~ k, subset(h, k %in% coords0$k), median)
v <- aggregate(v ~ k, subset(h, k %in% coords0$k), length)
f <- merge(merge(p, coords0, by = "k"), v, by = "k")
str(f)
tail(f)
summary(f)
sum(duplicated(coords0$k))
coords0[duplicated(coords0$k),]
coords0[coords0$k %in% head(coords0$k[duplicated(coords0$k)]),]
which(coords0$k %in% head(coords0$k[duplicated(coords0$k)]))
which(duplicated(coords0$k) & !duplicated(coords0$x))
which(duplicated(coords0$k) & !duplicated(round(coords0$x)))
x <- which(duplicated(coords0$k) & !duplicated(round(coords0$x)))
k_ <- coords0$k[x]
head(k_)
l <- length(k_)
coords3 <- data.frame(k = rep(NA, l), x = rep(NA, l), y = rep(NA, l), stringsAsFactors = F)
k <- coords0$k[x]
k_ <- paste0("http://pkk5.rosreestr.ru/#text=", gsub(":","%3A", k), "&type=2&app=search&opened=1")
head(k_)
require(RSelenium)
checkForServer()
require(RSelenium)
library("RSelenium", lib.loc="~/R/win-library/3.3")
remove.packages("RSelenium", lib="~/R/win-library/3.3")
require(devtools)
install_version("RSelenium", version = "1.7.0", repos = "http://cran.ru.r-project.org")
require(devtools)
install_version("RSelenium", version = "1.7.0", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("RSelenium", version = "1.7.0", repos = "http://cran.us.r-project.org", upgrade_dependencies = FALSE)
library("devtools", lib.loc="~/R/win-library/3.3")
devtools::install_github("ropensci/RSelenium")
install.packages("RSelenium")
require(RSelenium)
checkForServer()
library("RSelenium", lib.loc="~/R/win-library/3.3")
checkForServer()
RSelenium::checkForServer()
rsDriver()
head(k_)
startServer(args=c("-Dwebdriver.chrome.driver=C:/Users/Korytin_Andrey/Documents/R/chromedriver.exe"),
log = FALSE, invisible = FALSE)
rsDriver()
remDr <- remoteDriver(browserName = "chrome")
remDr$open(silent = TRUE)
for(i in 1:l) {
url <- k_[i]
remDr$navigate(url)
Sys.sleep(3)
a <- remDr$getCurrentUrl()
coords3$k[i] <- gsub("%3A", ":", gsub("(.*text=)|(&type=.*)", "", a[[1]]))
coords3$x[i] <- gsub("(.*x=)|(&y=.*)", "", a[[1]])
coords3$y[i] <- gsub("(.*y=)|(&z=.*)", "", a[[1]])
print(i)
if (coords1$x[i]==coords1$x[i-1] | nchar(coords1$x[i]) > 22) {
remDr$refresh()
remDr$navigate(url)
Sys.sleep(3)
a <- remDr$getCurrentUrl()
coords3$k[i] <- gsub("%3A", ":", gsub("(.*text=)|(&type=.*)", "", a[[1]]))
coords3$x[i] <- gsub("(.*x=)|(&y=.*)", "", a[[1]])
coords3$y[i] <- gsub("(.*y=)|(&z=.*)", "", a[[1]])
print(i)
}
}
i <- 1
url <- k_[i]
remDr$navigate(url)
Sys.sleep(3)
a <- remDr$getCurrentUrl()
coords3$k[i] <- gsub("%3A", ":", gsub("(.*text=)|(&type=.*)", "", a[[1]]))
coords3$x[i] <- gsub("(.*x=)|(&y=.*)", "", a[[1]])
coords3$y[i] <- gsub("(.*y=)|(&z=.*)", "", a[[1]])
print(i)
for(i in 2:l) {
url <- k_[i]
remDr$navigate(url)
Sys.sleep(3)
a <- remDr$getCurrentUrl()
coords3$k[i] <- gsub("%3A", ":", gsub("(.*text=)|(&type=.*)", "", a[[1]]))
coords3$x[i] <- gsub("(.*x=)|(&y=.*)", "", a[[1]])
coords3$y[i] <- gsub("(.*y=)|(&z=.*)", "", a[[1]])
print(i)
if (coords1$x[i]==coords1$x[i-1] | nchar(coords1$x[i]) > 22) {
remDr$refresh()
remDr$navigate(url)
Sys.sleep(3)
a <- remDr$getCurrentUrl()
coords3$k[i] <- gsub("%3A", ":", gsub("(.*text=)|(&type=.*)", "", a[[1]]))
coords3$x[i] <- gsub("(.*x=)|(&y=.*)", "", a[[1]])
coords3$y[i] <- gsub("(.*y=)|(&z=.*)", "", a[[1]])
print(i)
}
}
coords3
for(i in 2:l) {
url <- k_[i]
remDr$navigate(url)
Sys.sleep(3)
a <- remDr$getCurrentUrl()
coords3$k[i] <- gsub("%3A", ":", gsub("(.*text=)|(&type=.*)", "", a[[1]]))
coords3$x[i] <- gsub("(.*x=)|(&y=.*)", "", a[[1]])
coords3$y[i] <- gsub("(.*y=)|(&z=.*)", "", a[[1]])
print(i)
if (coords3$x[i]==coords3$x[i-1] | nchar(coords3$x[i]) > 22) {
remDr$refresh()
remDr$navigate(url)
Sys.sleep(3)
a <- remDr$getCurrentUrl()
coords3$k[i] <- gsub("%3A", ":", gsub("(.*text=)|(&type=.*)", "", a[[1]]))
coords3$x[i] <- gsub("(.*x=)|(&y=.*)", "", a[[1]])
coords3$y[i] <- gsub("(.*y=)|(&z=.*)", "", a[[1]])
print(i)
}
}
coords3
which(duplicated(coords3$k))
which(coords3$k != k)
which(duplicated(k))
k[78]
i <- 78
url <- k_[i]
remDr$navigate(url)
Sys.sleep(3)
a <- remDr$getCurrentUrl()
coords3$k[i] <- gsub("%3A", ":", gsub("(.*text=)|(&type=.*)", "", a[[1]]))
coords3$x[i] <- gsub("(.*x=)|(&y=.*)", "", a[[1]])
coords3$y[i] <- gsub("(.*y=)|(&z=.*)", "", a[[1]])
print(i)
which(coords3$k != k)
which(as.numeric(coords3$k) < 12*10^6)
which(as.numeric(coords3$x) < 12*10^6)
coords3$x[55] <- 14542657.27365
coords3$y[55] <- 8765640.381
coords3$x <- as.numeric(coords3$x)
coords3$y <- as.numeric(coords3$y)
coords0$x[x] <- coords3$x
coords0$y[x] <- coords3$y
which(duplicated(coords0$k) & !duplicated(round(coords0$x)))
x
a <- duplicated(coords0$k) & !duplicated(round(coords0$x))
which((coords0$k %in% a) & !a)
which((coords0$k %in% coords0$k[a]) & !a)
coords0$k[which((coords0$k %in% coords0$k[a]) & !a)]
coords0$k[a]
table(coords0$k[a])
table(coords0$k[which((coords0$k %in% coords0$k[a]) & !a)])
coords3[64,] <- coords3[65,]
coords0$y[x] <- coords3$y
coords0$x[x] <- coords3$x
a <- duplicated(coords0$k) & !duplicated(round(coords0$x))
table(coords0$k[a])
table(coords0$k[(coords0$k %in% coords0$k[a]) & !a])
which(a)
x
sim(which(a)!=x)
sum(which(a)!=x)
sum(!(which(a) %in% x))
which(a)[!(which(a) %in% x)]
coords0[10426]
coords0[10426,]
coords0[coords0$k == "41:06:050112",]
coords0 <- coords0[!a,]
coords0 <- coords0[!duplicated(coords0$k),]
dim(coords0)
str(coords0)
coords0 <- cbind(coords0[,1:3], mercator(coords0[,2:3], inverse = T))
require(geosphere)
coords0 <- cbind(coords0[,1:3], mercator(coords0[,2:3], inverse = T))
p <- aggregate(p ~ k, subset(h, k %in% coords0$k), median)
v <- aggregate(v ~ k, subset(h, k %in% coords0$k), length)
dim(p)
dim(v)
saveRDS(coords0, "coords0.Rds")
f <- merge(merge(coords0, p, by = "k"), v, by = "k")
dim(f)
head(f)
ff <- sp::SpatialPointsDataFrame(f[,4:5], f[,c(1,6,7)])
which(is.na(f$x))
which(is.na(f$y))
which(is.na(f$lat))
which(is.na(f$lon))
f <- merge(merge(coords0, p, by = "k"), v, by = "k")[-6657,]
ff <- sp::SpatialPointsDataFrame(f[,4:5], f[,c(1,6,7)])
ff$p <- log(ff$p)
qpal <- colorQuantile("YlOrRd", ff$p, n = 7)
require(leaflet)
qpal <- colorQuantile("YlOrRd", ff$p, n = 7)
leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*n), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
str(f)
str(ff)
leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
saveRDS(ff, "land_parcels_deals.Rds")
saveRDS(df, "initial_data.Rds")
saveRDS(h, "filtred_data.Rds")
saveRDS(f, "land_parcels_deals.Rds")
qpal <- colorQuantile("YlOrRd", ff$p, n = 7)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
require(leaflet)
qpal <- colorQuantile("YlOrRd", ff$p, n = 7)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = qpal, values = ~exp(p),
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = qpal, values = ~p,
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
pal <- colorNumeric("YlOrRd", ff$p)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = qpal, values = ~exp(p)p,
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
pal <- colorNumeric("YlOrRd", ff$p)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~exp(p),
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
summary(ff$p)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p,
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
pal <- colorQuantile("YlOrRd", ff$p, n = 10)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~round(exp(p)),
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
qpal <- colorQuantile("YlOrRd", ff$p, n = 10)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = qpal, values = ~p,
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = qpal, values = ~exp(p),
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = qpal, values = ~exp(p)p,
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~qpal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = qpal, values = ~p*max(p),
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
summary(ff$p)
quantile(ff$p, 1:10/10)
exp(10)
quantile(ff$p, .05)
quantile(ff$p, .95)
pal <- colorNumeric("YlOrRd", ff$p, n = 10)
head(pal)
pal
pal <- colorNumeric("YlOrRd", ifelse(ff$p>0, ifelse(ff$p<9, ff$p, 9), 0), n = 10)
pal <- colorNumeric("YlOrRd", ifelse(ff$p>0, ifelse(ff$p<9, ff$p, 9), 0), n = 10)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p,
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
m
pal <- colorNumeric("YlOrRd", ifelse(ff$p>0, ifelse(ff$p<9, ff$p, 9), 0))
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p,
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p,
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"),
opacity = 1
)
pal <- colorNumeric("YlOrRd", ifelse(ff$p>0, ifelse(ff$p<9, ff$p, 9), 0))
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"), opacity = 1)
m
x <- ifelse(ff$p>0, ifelse(ff$p<9, ff$p, 9), 0)
summary(x)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal,
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
m
ff$p_ <- ifelse(ff$p>0, ifelse(ff$p<9, ff$p, 9), 0)
ff$p <- exp(ff$p)
pal <- colorNumeric("YlOrRd", p_)
pal <- colorNumeric("YlOrRd", ff$p_)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p_),
fillOpacity = ~.5, popup = ~paste(k, round(p), sep = " ~ "))
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p_),
fillOpacity = ~.5, popup = ~paste(k, round(p), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"), opacity = 1)
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p_),
fillOpacity = ~.5, popup = ~paste(k, round(p), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p_, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"), opacity = 1)
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p_),
fillOpacity = ~.5, popup = ~paste(k, round(p), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~exp(p_), title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = " RUB"), opacity = 1)
m
pal <- colorQuantile("YlOrRd", ff$p, n = 10)
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(p), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = " RUB"), opacity = 1)
m
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(p), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(type = "numeric", suffix = " RUB"), opacity = 1)
ff$p <- log(ff$p)
pal <- colorNumeric("YlOrRd", ifelse(ff$p>0, ifelse(ff$p<9, ff$p, 9), 0))
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(p),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(ifelse(ff$p>0, ifelse(ff$p<9, ff$p, 9), 0)),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(ifelse(p>0,ifelse(p<9,p,9),0)),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
m
m %>% addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"), opacity = 1)
m %>% addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB"), opacity = 1, transform = exp)
m %>% addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB", transform = exp), opacity = 1)
m %>% addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix = "RUB", transform = function(x) round(exp(x))), opacity=1)
f09 <- function(x) ifelse(x>0, ifelse(x<9, x, 9), 0)
pal <- colorNumeric("YlOrRd", f09(ff$p))
m <- leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(f09(p)),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ "))
m %>% addLegend("bottomright", pal = pal, values = ~p, title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix="RUB", transform = function(x) round(exp(f09(x)))),
opacity = 1)
m %>% addLegend("bottomright", pal = pal, values = ~f09(p), title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix="RUB", transform = function(x) round(exp(f09(x)))),
opacity = 1)
m %>% addLegend("bottomright", pal = pal, values = ~f09(p), title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix=" RUB", transform = function(x) round(exp(f09(x)))),
opacity = 1)
m %>% addLegend("bottomright", pal = pal, values = ~f09(p), title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix=" RUB", transform = function(x) round(exp(f09(x))),
big.mark = " "), opacity = 1)
library(shiny)
ui <- fluidPage(leafletOutput("mymap"))
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(f09(p)),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~f09(p),
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix=" RUB", transform = function(x) round(exp(f09(x))),
big.mark = " "), opacity = 1)
})
}
library("rsconnect", lib.loc="~/R/win-library/3.3")
server <-
shinyApp(ui, server)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(ff) %>% addTiles() %>%
addCircleMarkers(radius = ~sqrt(4*v), stroke = F, color = ~pal(f09(p)),
fillOpacity = ~.5, popup = ~paste(k, round(exp(p)), sep = " ~ ")) %>%
addLegend("bottomright", pal = pal, values = ~f09(p),
title = "Median parcels' price, RUB/sq.m",
labFormat = labelFormat(suffix=" RUB", transform = function(x) round(exp(f09(x))),
big.mark = " "), opacity = 1)
})
}
shinyApp(ui, server)
runApp('~/R/ShinyApps/dv_gektar')
runApp('~/R/ShinyApps/dv_gektar')
runApp('~/R/ShinyApps/dv_gektar')
runApp('~/R/ShinyApps/dv_gektar')
